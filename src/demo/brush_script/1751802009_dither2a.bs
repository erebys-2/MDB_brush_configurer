local prevX, prevY
local first	= true
local canvasX, canvasY	= bs_canvas_width(), bs_canvas_height()-1
local checked	= {}	-- used to prevent re-drawing pixels
for i=0,bs_canvas_height() do checked[i] = {} end

local mX, mY	= bs_param2(), bs_param2()	-- matrix width/height
if bs_param3() == 1 then mY	= math.ceil(mX/2) end
local mTotal 	= mX * mY

local r,g,b,r2,g2,b2

--setup matrix
local matrix
if bs_param3() == 0 then	--full-height matrices
	if mX == 2 then		--2×2 matrix
		matrix	= {[0]= {[0]= 1, 4},
						{[0]= 3, 2}}
	elseif mX == 3 then	--3×3 matrix
		matrix	= {[0]= {[0]= 1, 4, 8},
						{[0]= 5, 9, 2},
						{[0]= 6, 7, 3}}
	elseif mX == 4 then	--4×4 matrix
		matrix	= {[0]= {[0]=  1, 13,  4, 16},
						{[0]=  9,  5, 12,  8},
						{[0]=  3, 15,  2, 14},
						{[0]= 11,  7, 10,  6}}
	elseif mX == 5 then	--5×5 matrix
		matrix	= {[0]= {[0]=  1, 21, 13,  3, 16},
						{[0]= 16,  6, 22, 17,  8},
						{[0]= 25, 15,  2, 10, 20},
						{[0]=  9, 19, 12,  5, 14},
						{[0]= 11,  4, 18, 23,  7}}
	elseif mX == 6 then	--6×6 matrix
		matrix	= {[0]= {[0]=  1, 13, 29,  4, 16, 32},
						{[0]= 17, 33,  5, 20, 36,  8},
						{[0]= 21, 25,  9, 24, 28, 12},
						{[0]=  3, 15, 31,  2, 14, 30},
						{[0]= 19, 35,  7, 18, 34,  6},
						{[0]= 23, 27, 11, 22, 26, 10}}
	elseif mX== 7 then	--7×7 matrix
		matrix	= {[0]= {[0]=  1, 18, 35, 45, 13, 23, 40},
						{[0]= 26, 36,  4, 21, 31, 48,  9},
						{[0]= 44, 12, 22, 39,  7, 17, 34},
						{[0]= 20, 30, 47,  8, 25, 42,  3},
						{[0]= 33, 43, 11, 28, 38,  6, 16},
						{[0]=  2, 19, 29, 46, 14, 24, 41},
						{[0]= 27, 37,  5, 15, 32, 49, 10}}
	else	--8×8 matrix
		matrix	= {[0]= {[0]=  1, 49, 13, 61,  4, 52, 16, 64},
						{[0]= 33, 17, 45, 29, 36, 18, 48, 32},
						{[0]=  9, 57,  5, 53, 12, 60,  8, 56},
						{[0]= 41, 25, 37, 21, 44, 28, 40, 24},
						{[0]=  3, 51, 15, 63,  2, 50, 14, 62},
						{[0]= 35, 19, 47, 31, 34, 18, 46, 30},
						{[0]= 11, 59,  7, 55, 10, 58,  6, 54},
						{[0]= 43, 27, 39, 23, 42, 26, 38, 22}}
	end
else	--half-height matrices
	if mX == 2 then		--2×1 matrix
		matrix	= {[0]= {[0]= 1, 2}}
	elseif mX == 3 then --3×2 matrix
		matrix	= {[0]= {[0]= 1, 3, 5},
						{[0]= 4, 6, 2}}
	elseif mX == 4 then	--4×2 matrix
		matrix	= {[0]= {[0]= 1, 7, 2, 8},
						{[0]= 5, 3, 6, 4}}
	elseif mX == 5 then	--5×3 matrix
		matrix	= {[0]= {[0]=  1, 13,  8,  4, 10},
						{[0]= 15,  9,  2,  6, 12},
						{[0]=  7,  5, 11, 14,  3}}
	elseif mX == 6 then	--6×3 matrix
		matrix	= {[0]= {[0]=  1,  7, 15,  2,  8, 16},
						{[0]=  9, 17,  3, 10, 18,  4},
						{[0]= 11, 13,  5, 12, 14,  6}}
	elseif mX == 7 then --7×4 matrix
		matrix	= {[0]= {[0]=  1, 24, 22, 10, 26, 12, 16},
						{[0]= 28, 13,  4, 18,  7, 20,  3},
						{[0]=  2, 19, 15,  8, 17,  6, 25},
						{[0]= 21, 14,  5, 27, 11, 23,  9}}
	else	--8×4 matrix
		matrix	= {[0]= {[0]=  1, 25,  7, 31,  2, 26,  8, 32}, 
						{[0]= 17,  9, 23, 15, 18, 10, 24, 16},
						{[0]=  5, 29,  3, 27,  6, 30,  4, 28},
						{[0]= 21, 13, 19, 11, 22, 14, 20, 12}}
	end
end

local mT, m = mTotal + 1
if bs_param4() == 1 then -- invert matrix
	for k=0,mY-1 do
		m = matrix[k]
		for i=0,mX-1 do	m[i] = mT - m[i] end
	end
end

local bs_distance, bs_opaque, bs_fore, bs_bg, bs_pixel_set = bs_distance, bs_opaque, bs_fore, bs_bg, bs_pixel_set
local stepX, stepY	= bs_param6(), bs_param7()	
local min, max, ceil, floor  = math.min, math.max, math.ceil, math.floor

local pres_set	= bs_param5() > 0
local pres_not	= not pres_set

local o, D	-- density value according to dither matrix
local useBG = bs_param8() < 1

local function round( num ) -- rounds using floating point precision loss
	return num + (2^52 + 2^51) - (2^52 + 2^51)
end

local function ditherdraw( x, y, p, w )
	-- localize variables to improve performance
	local min, max, ceil	= min, max, ceil
	local round		= round
	local canvasX	= canvasX

	local s  = max(round(w*0.5), 1)
	local x1, y1 = round(x-s),   round(y-s)	  -- initial x,y
	local x2, y2 = round(x+s)-1, round(y+s)-1 -- final x,y
	if x1 >= canvasX or x2 < 0 or y1 > canvasY or y2 < 0 then return 0 end
	x1, y1 = max(min(x1, canvasX),0), max(min(y1, canvasY),0)
	x2, y2 = max(min(x2, canvasX),x1), max(min(y2, canvasY),y1)
	
	--local r, g, b		= bs_fore()
	--local r2, g2, b2	= bs_bg()
	
	local bs_pixel_set	= bs_pixel_set
	local checked		= checked
	local matrix		= matrix
	local mX, mY, D		= mX, mY, D
	local stepX, stepY	= stepX, stepY
	local useBG			= useBG
	local ind, c, m, v
	for k=y1,y2 do
		c = checked[k]; m = matrix[(k*stepY)%mY]
		for i=x1,x2 do
			if not c[i] then
				v = m[(i*stepX)%mX]
				if p >= v then
					c[i] = true; bs_pixel_set(i,k,r,g,b,255)
				else
					c[i] = pres_not or (v > D) -- we can mark this pixel as checked if we're not using pressure or it's higher than our max density
					if useBG then bs_pixel_set(i,k,r2,g2,b2,255) end
				end
			end
		end
	end
end

local space, count = bs_param9(), 0
function main( x, y, p )
	if a == 0 then return 0	end
	if first then
		-- initialize some things here since they don't work outside of main
		o = ceil(floor(bs_opaque()*100)/100*mTotal); D = o	-- density value according to dither matrix
		r, g, b		= bs_fore()
		r2, g2, b2	= bs_bg()
		if pres_set then o = o*100/bs_param5() end
		
		--delay correction
		local oo = o
		if pres_set then oo = max(min(round(oo*p), D), 1) end	-- pressure density
		local dx,dy = bs_dir()
		ditherdraw(x-round(dx),y-round(dy),oo,bs_width())
		prevX, prevY = round(x), round(y)
		first = false
	else
		if bs_distance(prevX - round(x), prevY - round(y)) < 1 then
			return 0
		end
		prevX, prevY = round(x), round(y)
		count = count + 1
		if count < space then return 0 end
	end
	count = 0
	local oo = o
	if pres_set then oo = max(min(round(oo*p), D), 1) end	-- pressure density
	if oo > 0 then ditherdraw(x,y,oo,bs_width()) end
	return 1
end 

function last( x, y, p )
	if bs_param1() > 0 then
		local oo = o
		if pres_set then oo = min(round(oo*p), D) end	-- pressure density
		if oo > 0 then ditherdraw(x,y,oo,bs_width_min()) end
		return 1
	end
	return 0
end

function default_size() return 16, 0.2 end
function param1()  return "Draw on Release",				0,	1,		1	end
function param2()  return "Pattern Size",					2,	8,		8	end
function param3()  return "Half-Height Pattern",			0,	1,		0	end
function param4()  return "Invert Pattern",					0,	1,		0	end
function param5()  return "Density by Pressure",			0,	100,	0	end
function param6()  return "Pattern X step",					1,	7,		1	end
function param7()  return "Pattern Y step",					1,	7,		1	end
function param8()  return "Transparent BG Color",			0,	1,		1	end
function param9()  return "Spacing",						1,	100,	1	end