bs_setmode(1)
local prevX, prevY
local first	= true
local min, max, ceil	= math.min, math.max, math.ceil
local bs_pixel_set, bs_distance, bs_opaque = bs_pixel_set, bs_distance, bs_opaque
local pres, step	= bs_param9(), 1
if pres > 0 then 
	pres	= 100/pres
	if bs_param9() > 0 then -- stepped opacity
		step	= ceil(255/bs_param10())
		pres	= pres / step
	end	
end

local checked, mChecked = {}, {}	-- used to prevent re-drawing pixels
for i=0,bs_canvas_height() do checked[i] = {}; mChecked[i] = {} end

-- a couple other variables defined below the drawing functions
local function round( num ) return num + 0.5 - (num + 0.5) % 1 end

--straight horizontal
local function draw_angle0( x1, y1, x2, y2, a, sp, sh, check)
	local c
	for k=(y1+sp)-(y1%sp),y2,sp do
		c = check[k]
		for i=x1,x2 do
			if not c[i] then
				c[i] = true; bs_pixel_set(i,k+sh,0,0,0,a)
			end
		end
	end
end

--22.5° diagonal
local function draw_angle1( x1, y1, x2, y2, a, sp, sh, check)
	local c, k2
	for k=y1,y2 do
		c, k2 = check[k], k%sp
		for i=x1,x2 do
			if not c[i] then
				c[i] = true
				if k2 == round((i-1)*0.5)%sp then
					bs_pixel_set(i+sh,k,0,0,0,a)
				end
			end
		end
	end
end

local function draw_mirror1( x1, y1, x2, y2, a, sp, sh, check)
	local ssp, ssh = sp-1, 1-(sp%2)
	local c, k2
	for k=y1,y2 do
		c, k2 = check[k], ssp - k%sp
		for i=x1,x2 do
			if not c[i] then
				c[i] = true
				if k2 == round((i+ssh)*0.5)%sp then
					bs_pixel_set(i+sh,k,0,0,0,a)
				end
			end
		end
	end
end

--45° diagonal
local function draw_angle2( x1, y1, x2, y2, a, sp, sh, check)
	local c, k2
	for k=y1,y2 do
		c, k2 = check[k], k%sp
		for i=x1,x2 do
			if not c[i] then
				c[i] = true
				if i%sp == k2 then
					bs_pixel_set(i+sh,k,0,0,0,a)
				end
			end
		end
	end
end

local function draw_mirror2( x1, y1, x2, y2, a, sp, sh, check)
	local ssp, ssh	= sp-1, sh-1
	local c, k2	
	for k=y1,y2 do
		c, k2 = check[k], ssp - (k%sp)
		for i=x1,x2 do
			if not c[i] then
				c[i] = true
				if k2 == i%sp then
					bs_pixel_set(i+ssh,k,0,0,0,a)
				end
			end
		end
	end
end

--67.5° diagonal
local function draw_angle3( x1, y1, x2, y2, a, sp, sh, check)
	local c, k2
	for k=y1,y2 do
		c, k2 = check[k], round((k-1)*0.5)%sp
		for i=x1,x2 do
			if not c[i] then
				c[i] = true
				if k2 == i%sp then
					bs_pixel_set(i,k+sh,0,0,0,a)
				end
			end
		end
	end
end

local function draw_mirror3( x1, y1, x2, y2, a, sp, sh, check)
	local ssp, ssh = sp-1, 1-(sp%2)
	local c, k2
	for k=y1,y2 do
		c, k2 = check[k], ssp - round((k+ssh)*0.5)%sp
		for i=x1,x2 do
			if not c[i] then
				c[i] = true
				if k2 == i%sp then
					bs_pixel_set(i,k+sh,0,0,0,a)
				end
			end
		end
	end
end

--straight vertical
local function draw_angle4( x1, y1, x2, y2, a, sp, sh, check)	
	local c
	for k=y1,y2 do
		c = check[k]
		for i=(x1+sp)-(x1%sp),x2,sp do
			if not c[i] then
				c[i] = true; bs_pixel_set(i+sh,k,0,0,0,a)
			end
		end
	end
end

-- to automate picking the correct draw function
local onaxis	= {[0]= draw_angle0,  draw_angle1,  draw_angle2,  draw_angle3, draw_angle4 }
local offaxis	= {[0]= draw_angle4, draw_mirror3, draw_mirror2, draw_mirror1, draw_angle0 }
local mainDraw, subDraw = onaxis[bs_param5() % 5], offaxis[bs_param8() % 5]

local canvasX, canvasY	= bs_canvas_width(), bs_canvas_height()-1
local sp1, sp2, sh1, sh2 = bs_param3(), bs_param6(), bs_param4(), bs_param7()

local function hatchdraw( x, y, p, w)
	local min, max	= min, max
	local round	= round
	
	local s  = max(round(w*0.5), 1)
	local x1, y1 = round(x-s),   round(y-s)	  -- initial x,y
	local x2, y2 = round(x+s)-1, round(y+s)-1 -- final x,y
	if x1 >= canvasX or x2 < 0 or y1 > canvasY or y2 < 0 then return 0 end
	x1, y1 = max(min(x1, canvasX),0), max(min(y1, canvasY),0)
	x2, y2 = max(min(x2, canvasX),x1), max(min(y2, canvasY),y1)
	
	local a 	= bs_opaque()*255
	if pres > 0 then a = max(min(ceil(a*pres*p)*step,255), 1) end -- pressure opacity
	
	--main axis
	if bs_param2() <= 2 then
		mainDraw(x1, y1, x2, y2, a, sp1, sh1, checked)
	end
	
	--subaxis
	if bs_param2() >= 2 then
		subDraw(x1, y1, x2, y2, a, sp2, sh2, mChecked)
	end
end

function main( x, y, p )
	if first then
		-- delay correction
		local dx,dy = bs_dir()
		hatchdraw(x-round(dx),y-round(dy),p,bs_width())
		first = false
	else
		if bs_distance(prevX - round(x), prevY - round(y)) < 1 then
			return 0
		end
	end

	hatchdraw(x,y,p,bs_width())
	prevX, prevY = round(x), round(y)
	return 1
end 

function last( x, y, p )
	if bs_param1() == 1 then hatchdraw(x,y,p,bs_width_min()); return 1 end
	return 0
end

function default_size() return 16, 0.2 end
function param1()  return "Draw on Release",		0,	1,		1	end
function param2()  return "Main/Both/Mirror Axis",	1,	3,		1	end
function param3()  return "Main Spacing",			1,	16,		4	end
function param4()  return "Main Shift",				0,	15,		0	end
function param5()  return "Main Angle",				0,	4,		2	end
function param6()  return "Mirror Spacing",			1,	16,		4	end
function param7()  return "Mirror Shift",			0,	15,		0	end
function param8()  return "Mirror Angle",			0,	4,		2	end
function param9()  return "Opacity by Pressure",	0,	100,	0	end
function param10() return "Opacity Steps",			0,	16,		4	end